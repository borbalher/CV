/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var scss = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"startStatus":3,"scssBlock":4,"blockList":5,"EOF":6,"SCSSOP":7,"varList":8,"atKeyRulesList":9,"var":10,"$":11,"ID":12,"=":13,"value":14,"ENDLINE":15,"atKeyRule":16,"atKey":17,"optionalValueID":18,"valueList":19,"block":20,"selector":21,"selectorList":22,"{":23,"blockContents":24,"}":25,"numbers":26,"NUMBER":27,"units":28,"pseudoClass":29,"PSEUDOOP":30,"optPseudoClass":31,"(":32,")":33,"@":34,"hash":35,"#":36,"class":37,".":38,"attSelector":39,"[":40,"attr":41,"ATTROP":42,"]":43,"ALPHANUMERIC":44,"!":45,"..":46,"URL":47,"STRING":48,"HEXADECIMALCOLOR":49,"varValue":50,"optionalInternalBlock":51,"internalBlock":52,"blockContent":53,"internalAtribute":54,"internalBlockSelector":55,">":56,"+":57,",":58,":":59,"~":60,"atributeValueList":61,"*":62,"selectorListElement":63,"px":64,"mx":65,"%":66,"cm":67,"mm":68,"em":69,"ex":70,"pt":71,"pc":72,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"SCSSOP",11:"$",12:"ID",13:"=",15:"ENDLINE",18:"optionalValueID",23:"{",25:"}",27:"NUMBER",30:"PSEUDOOP",32:"(",33:")",34:"@",36:"#",38:".",40:"[",42:"ATTROP",43:"]",44:"ALPHANUMERIC",45:"!",46:"..",47:"URL",48:"STRING",49:"HEXADECIMALCOLOR",56:">",57:"+",58:",",59:":",60:"~",62:"*",64:"px",65:"mx",66:"%",67:"cm",68:"mm",69:"em",70:"ex",71:"pt",72:"pc"},
productions_: [0,[3,3],[4,4],[4,0],[10,5],[8,2],[8,0],[9,2],[9,0],[16,3],[16,3],[5,2],[5,0],[20,5],[26,2],[29,3],[31,3],[31,3],[31,0],[17,2],[35,2],[37,2],[39,5],[39,5],[41,1],[14,1],[14,2],[14,2],[14,1],[14,3],[14,5],[14,2],[14,1],[14,1],[14,4],[14,1],[14,1],[51,1],[51,0],[24,2],[24,0],[53,1],[53,1],[53,6],[50,2],[52,6],[52,5],[55,3],[55,3],[55,3],[55,3],[55,3],[19,1],[19,3],[19,2],[61,1],[54,4],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[22,2],[22,0],[63,1],[63,2],[63,2],[63,2],[63,2],[63,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: typeof console !== 'undefined' ? console.log($$[$0-2]) : print($$[$0-2]);
          return { BloqueSCSS: $$[$0-2], BloquesNormales: $$[$0-1]}
	
break;
case 2:this.$ = {VarList: $$[$0-2], atKeyRules: $$[$0-1]};
break;
case 3:this.$ = "";
break;
case 4:this.$ = {atribute: $$[$0-4]+$$[$0-3], type: "VARIABLES", value: $$[$0-1]};
break;
case 5:	
					this.$=[$$[$0]];
					if($$[$0-1] && $$[$0-1].length > 0){
						this.$ = this.$.concat($$[$0-1]);
				     	}
				
break;
case 6:this.$ = "";
break;
case 7:	
					this.$=[$$[$0]];
					if($$[$0-1] && $$[$0-1].length > 0){
						this.$ = this.$.concat($$[$0-1]);
				     	}
				
break;
case 8:this.$ = "";
break;
case 9:this.$ = {type: $$[$0-2], value: $$[$0-1]};
break;
case 10:this.$ = {type: $$[$0-2], value: $$[$0-1]};
break;
case 11:	
					this.$=[$$[$0]];
					if($$[$0-1] && $$[$0-1].length > 0){
						this.$ = this.$.concat($$[$0-1]);
				     	}
				
break;
case 12:this.$ = "";
break;
case 13:this.$ = {selector: $$[$0-4]+$$[$0-3], BlockContent: $$[$0-1]};
break;
case 14:this.$ = $$[$0-1]+$$[$0];
break;
case 15:this.$ = $$[$0-2]+$$[$0-1]+$$[$0];
break;
case 16:this.$ = $$[$0-1];
break;
case 17:this.$ = $$[$0-1];
break;
case 18:this.$ = "";
break;
case 19:this.$ = $$[$0-1]+$$[$0];
break;
case 20:this.$ = $$[$0-1]+$$[$0];
break;
case 21:this.$ = $$[$0-1]+$$[$0];
break;
case 22:this.$ = $$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 23:this.$ = $$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 24:this.$ = $$[$0];
break;
case 25:this.$ = $$[$0];
break;
case 26:this.$ = $$[$0-1]+$$[$0];
break;
case 27:this.$ = $$[$0-1]+$$[$0];
break;
case 28:this.$ = $$[$0];
break;
case 29:this.$ = $$[$0-2]+$$[$0-1]+$$[$0];
break;
case 30:this.$ = {type: "SCSSFUNCTION", id: $$[$0-3], params: $$[$0-1] };
break;
case 31:this.$ = $$[$0-1]+$$[$0];
break;
case 32:this.$ = $$[$0];
break;
case 33:this.$ = $$[$0];
break;
case 34:this.$ = $$[$0-3]+$$[$0-2];
				var list = $$[$0-1];
				for(var j in list){
				   this.$ = this.$ + list[j];	
				} 
				this.$ = this.$ + $$[$0];
break;
case 35:this.$ = $$[$0];
break;
case 36:this.$ = $$[$0];
break;
case 37:this.$ = $$[$0];
break;
case 38:this.$ = "";
break;
case 39:	this.$=[$$[$0]];
					if($$[$0-1] && $$[$0-1].length > 0){
						this.$ = this.$.concat($$[$0-1]);
				     	}
				
break;
case 40:this.$ = "";
break;
case 41:this.$ = $$[$0];
break;
case 42:this.$ = $$[$0];
break;
case 43:this.$ = {type: "SCSSFUNCTION", id: $$[$0-4], params: $$[$0-2] };
break;
case 44:this.$ = $$[$0-1]+$$[$0];
break;
case 45:this.$ = {type: "SELECTOR", mode:$$[$0-5], selector: $$[$0-4]+$$[$0-3], BlockContent: $$[$0-1]};
break;
case 46:this.$ = {type:"SELECTOR", mode:$$[$0-4], selector: $$[$0-3], BlockContent: $$[$0-1]};
break;
case 47:this.$ = $$[$0-2]+$$[$0-1]+$$[$0];
break;
case 48:this.$ = $$[$0-2]+$$[$0-1]+$$[$0];
break;
case 49:this.$ = $$[$0-2]+$$[$0-1]+$$[$0];
break;
case 50:this.$ = $$[$0-2]+$$[$0-1]+$$[$0];
break;
case 51:this.$ = $$[$0-2]+$$[$0-1]+$$[$0];
break;
case 52:this.$=[$$[$0]];
break;
case 53:	this.$=[$$[$0-2]];
				        
					if($$[$0] && $$[$0].length > 0){
						this.$ = this.$.concat($$[$0-1]).concat($$[$0]);
				     	}
				
break;
case 54:	this.$=[$$[$0-1]];
					if($$[$0] && $$[$0].length > 0){
						this.$ = this.$.concat($$[$0]);
				     	}
				
break;
case 55:this.$=$$[$0]
break;
case 56:this.$ = {type: "ATRIBUTOS", atribute: $$[$0-3], value: $$[$0-1]};
break;
case 57:this.$ = $$[$0];
break;
case 58:this.$ = $$[$0];
break;
case 59:this.$ = $$[$0];
break;
case 60:this.$ = $$[$0];
break;
case 61:this.$ = $$[$0];
break;
case 62:this.$ = $$[$0];
break;
case 63:this.$ = $$[$0];
break;
case 64:this.$ = $$[$0-1]+$$[$0];
break;
case 65:this.$ = "";
break;
case 66:this.$ = $$[$0];
break;
case 67:this.$ = $$[$0-1]+$$[$0];
break;
case 68:this.$ = $$[$0-1]+$$[$0];
break;
case 69:this.$ = $$[$0-1]+$$[$0];
break;
case 70:this.$ = $$[$0-1]+$$[$0];
break;
case 71:this.$ = $$[$0-1]+$$[$0];
break;
case 72:this.$ = $$[$0];
break;
case 73:this.$ = $$[$0];
break;
case 74:this.$ = $$[$0];
break;
case 75:this.$ = $$[$0];
break;
case 76:this.$ = $$[$0];
break;
case 77:this.$ = $$[$0];
break;
case 78:this.$ = $$[$0];
break;
case 79:this.$ = $$[$0];
break;
case 80:this.$ = $$[$0];
break;
case 81:this.$ = "";
break;
}
},
table: [{3:1,4:2,6:[2,3],7:[1,3],12:[2,3],30:[2,3],34:[2,3],36:[2,3],38:[2,3],40:[2,3],62:[2,3]},{1:[3]},{5:4,6:[2,12],12:[2,12],30:[2,12],34:[2,12],36:[2,12],38:[2,12],40:[2,12],62:[2,12]},{7:[2,6],8:5,11:[2,6],34:[2,6]},{6:[1,6],12:[1,9],17:11,20:7,21:8,29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],62:[1,14]},{7:[2,8],9:21,10:22,11:[1,23],34:[2,8]},{1:[2,1]},{6:[2,11],12:[2,11],30:[2,11],34:[2,11],36:[2,11],38:[2,11],40:[2,11],62:[2,11]},{12:[1,9],17:11,21:26,22:24,23:[2,65],29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],56:[1,27],57:[1,28],58:[1,31],59:[1,29],60:[1,30],62:[1,14],63:25},{12:[2,57],23:[2,57],30:[2,57],34:[2,57],36:[2,57],38:[2,57],40:[2,57],56:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],62:[2,57]},{12:[2,58],23:[2,58],30:[2,58],34:[2,58],36:[2,58],38:[2,58],40:[2,58],56:[2,58],57:[2,58],58:[2,58],59:[2,58],60:[2,58],62:[2,58]},{12:[2,59],23:[2,59],30:[2,59],34:[2,59],36:[2,59],38:[2,59],40:[2,59],56:[2,59],57:[2,59],58:[2,59],59:[2,59],60:[2,59],62:[2,59]},{12:[2,60],23:[2,60],30:[2,60],34:[2,60],36:[2,60],38:[2,60],40:[2,60],56:[2,60],57:[2,60],58:[2,60],59:[2,60],60:[2,60],62:[2,60]},{12:[2,61],23:[2,61],30:[2,61],34:[2,61],36:[2,61],38:[2,61],40:[2,61],56:[2,61],57:[2,61],58:[2,61],59:[2,61],60:[2,61],62:[2,61]},{12:[2,62],23:[2,62],30:[2,62],34:[2,62],36:[2,62],38:[2,62],40:[2,62],56:[2,62],57:[2,62],58:[2,62],59:[2,62],60:[2,62],62:[2,62]},{12:[2,63],23:[2,63],30:[2,63],34:[2,63],36:[2,63],38:[2,63],40:[2,63],56:[2,63],57:[2,63],58:[2,63],59:[2,63],60:[2,63],62:[2,63]},{12:[1,33],41:32},{12:[1,34]},{12:[1,35]},{12:[1,36]},{12:[1,37]},{7:[1,38],16:39,17:40,34:[1,17]},{7:[2,5],11:[2,5],34:[2,5]},{12:[1,41]},{23:[1,42]},{12:[1,9],17:11,21:26,22:43,23:[2,65],29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],56:[1,27],57:[1,28],58:[1,31],59:[1,29],60:[1,30],62:[1,14],63:25},{12:[2,66],23:[2,66],30:[2,66],34:[2,66],36:[2,66],38:[2,66],40:[2,66],56:[2,66],57:[2,66],58:[2,66],59:[2,66],60:[2,66],62:[2,66]},{12:[1,9],17:11,21:44,29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],62:[1,14]},{12:[1,9],17:11,21:45,29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],62:[1,14]},{12:[1,9],17:11,21:46,29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],62:[1,14]},{12:[1,9],17:11,21:47,29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],62:[1,14]},{12:[1,9],17:11,21:48,29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],62:[1,14]},{13:[1,50],42:[1,49]},{13:[2,24],42:[2,24]},{7:[2,19],11:[2,19],12:[2,19],18:[2,19],23:[2,19],27:[2,19],30:[2,19],34:[2,19],36:[2,19],38:[2,19],40:[2,19],44:[2,19],45:[2,19],46:[2,19],47:[2,19],48:[2,19],49:[2,19],56:[2,19],57:[2,19],58:[2,19],59:[2,19],60:[2,19],62:[2,19]},{12:[2,20],23:[2,20],30:[2,20],34:[2,20],36:[2,20],38:[2,20],40:[2,20],56:[2,20],57:[2,20],58:[2,20],59:[2,20],60:[2,20],62:[2,20]},{12:[2,21],23:[2,21],30:[2,21],34:[2,21],36:[2,21],38:[2,21],40:[2,21],56:[2,21],57:[2,21],58:[2,21],59:[2,21],60:[2,21],62:[2,21]},{12:[2,18],23:[2,18],30:[2,18],31:51,32:[1,52],33:[2,18],34:[2,18],36:[2,18],38:[2,18],40:[2,18],56:[2,18],57:[2,18],58:[2,18],59:[2,18],60:[2,18],62:[2,18]},{6:[2,2],12:[2,2],30:[2,2],34:[2,2],36:[2,2],38:[2,2],40:[2,2],62:[2,2]},{7:[2,7],34:[2,7]},{7:[1,61],11:[1,66],12:[1,60],14:55,18:[1,53],19:54,27:[1,62],44:[1,56],45:[1,57],46:[1,58],47:[1,59],48:[1,63],49:[1,64],50:65},{13:[1,67]},{7:[2,40],12:[2,40],24:68,25:[2,40]},{23:[2,64]},{12:[2,67],23:[2,67],30:[2,67],34:[2,67],36:[2,67],38:[2,67],40:[2,67],56:[2,67],57:[2,67],58:[2,67],59:[2,67],60:[2,67],62:[2,67]},{12:[2,68],23:[2,68],30:[2,68],34:[2,68],36:[2,68],38:[2,68],40:[2,68],56:[2,68],57:[2,68],58:[2,68],59:[2,68],60:[2,68],62:[2,68]},{12:[2,69],23:[2,69],30:[2,69],34:[2,69],36:[2,69],38:[2,69],40:[2,69],56:[2,69],57:[2,69],58:[2,69],59:[2,69],60:[2,69],62:[2,69]},{12:[2,70],23:[2,70],30:[2,70],34:[2,70],36:[2,70],38:[2,70],40:[2,70],56:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],62:[2,70]},{12:[2,71],23:[2,71],30:[2,71],34:[2,71],36:[2,71],38:[2,71],40:[2,71],56:[2,71],57:[2,71],58:[2,71],59:[2,71],60:[2,71],62:[2,71]},{7:[1,61],11:[1,66],12:[1,60],14:69,27:[1,62],44:[1,56],45:[1,57],46:[1,58],47:[1,59],48:[1,63],49:[1,64],50:65},{7:[1,61],11:[1,66],12:[1,60],14:70,27:[1,62],44:[1,56],45:[1,57],46:[1,58],47:[1,59],48:[1,63],49:[1,64],50:65},{12:[2,15],23:[2,15],30:[2,15],33:[2,15],34:[2,15],36:[2,15],38:[2,15],40:[2,15],56:[2,15],57:[2,15],58:[2,15],59:[2,15],60:[2,15],62:[2,15]},{7:[1,61],11:[1,66],12:[1,60],14:55,19:71,27:[1,62],29:72,30:[1,20],44:[1,56],45:[1,57],46:[1,58],47:[1,59],48:[1,63],49:[1,64],50:65},{15:[1,73]},{15:[1,74]},{7:[1,61],11:[1,66],12:[1,60],14:55,15:[2,52],19:76,27:[1,62],33:[2,52],44:[1,56],45:[1,57],46:[1,58],47:[1,59],48:[1,63],49:[1,64],50:65,58:[1,75]},{7:[2,25],11:[2,25],12:[2,25],15:[2,25],27:[2,25],33:[2,25],43:[2,25],44:[2,25],45:[2,25],46:[2,25],47:[2,25],48:[2,25],49:[2,25],58:[2,25]},{12:[1,77]},{47:[1,78]},{7:[2,28],11:[2,28],12:[2,28],15:[2,28],27:[2,28],33:[2,28],43:[2,28],44:[2,28],45:[2,28],46:[2,28],47:[2,28],48:[2,28],49:[2,28],58:[2,28]},{7:[2,33],11:[2,33],12:[2,33],15:[2,33],27:[2,33],32:[1,80],33:[2,33],38:[1,79],43:[2,33],44:[2,33],45:[2,33],46:[2,33],47:[2,33],48:[2,33],49:[2,33],58:[2,33]},{12:[1,81]},{7:[2,81],11:[2,81],12:[2,81],15:[2,81],27:[2,81],28:82,33:[2,81],43:[2,81],44:[2,81],45:[2,81],46:[2,81],47:[2,81],48:[2,81],49:[2,81],58:[2,81],64:[1,83],65:[1,84],66:[1,85],67:[1,86],68:[1,87],69:[1,88],70:[1,89],71:[1,90],72:[1,91]},{7:[2,32],11:[2,32],12:[2,32],15:[2,32],27:[2,32],33:[2,32],43:[2,32],44:[2,32],45:[2,32],46:[2,32],47:[2,32],48:[2,32],49:[2,32],58:[2,32]},{7:[2,35],11:[2,35],12:[2,35],15:[2,35],27:[2,35],33:[2,35],43:[2,35],44:[2,35],45:[2,35],46:[2,35],47:[2,35],48:[2,35],49:[2,35],58:[2,35]},{7:[2,36],11:[2,36],12:[2,36],15:[2,36],27:[2,36],33:[2,36],43:[2,36],44:[2,36],45:[2,36],46:[2,36],47:[2,36],48:[2,36],49:[2,36],58:[2,36]},{12:[1,92]},{7:[1,61],11:[1,66],12:[1,60],14:93,27:[1,62],44:[1,56],45:[1,57],46:[1,58],47:[1,59],48:[1,63],49:[1,64],50:65},{7:[1,98],12:[1,99],25:[1,94],52:96,53:95,54:97},{43:[1,100]},{43:[1,101]},{33:[1,102]},{33:[1,103]},{7:[2,9],34:[2,9]},{7:[2,10],34:[2,10]},{7:[1,61],11:[1,66],12:[1,60],14:55,19:104,27:[1,62],44:[1,56],45:[1,57],46:[1,58],47:[1,59],48:[1,63],49:[1,64],50:65},{15:[2,54],33:[2,54]},{7:[2,26],11:[2,26],12:[2,26],15:[2,26],27:[2,26],33:[2,26],43:[2,26],44:[2,26],45:[2,26],46:[2,26],47:[2,26],48:[2,26],49:[2,26],58:[2,26]},{7:[2,27],11:[2,27],12:[2,27],15:[2,27],27:[2,27],33:[2,27],43:[2,27],44:[2,27],45:[2,27],46:[2,27],47:[2,27],48:[2,27],49:[2,27],58:[2,27]},{12:[1,105]},{7:[1,61],11:[1,66],12:[1,60],14:55,19:106,27:[1,62],44:[1,56],45:[1,57],46:[1,58],47:[1,59],48:[1,63],49:[1,64],50:65},{32:[1,107]},{7:[2,31],11:[2,31],12:[2,31],15:[2,31],27:[2,31],33:[2,31],43:[2,31],44:[2,31],45:[2,31],46:[2,31],47:[2,31],48:[2,31],49:[2,31],58:[2,31]},{7:[2,72],11:[2,72],12:[2,72],15:[2,72],27:[2,72],33:[2,72],43:[2,72],44:[2,72],45:[2,72],46:[2,72],47:[2,72],48:[2,72],49:[2,72],58:[2,72]},{7:[2,73],11:[2,73],12:[2,73],15:[2,73],27:[2,73],33:[2,73],43:[2,73],44:[2,73],45:[2,73],46:[2,73],47:[2,73],48:[2,73],49:[2,73],58:[2,73]},{7:[2,74],11:[2,74],12:[2,74],15:[2,74],27:[2,74],33:[2,74],43:[2,74],44:[2,74],45:[2,74],46:[2,74],47:[2,74],48:[2,74],49:[2,74],58:[2,74]},{7:[2,75],11:[2,75],12:[2,75],15:[2,75],27:[2,75],33:[2,75],43:[2,75],44:[2,75],45:[2,75],46:[2,75],47:[2,75],48:[2,75],49:[2,75],58:[2,75]},{7:[2,76],11:[2,76],12:[2,76],15:[2,76],27:[2,76],33:[2,76],43:[2,76],44:[2,76],45:[2,76],46:[2,76],47:[2,76],48:[2,76],49:[2,76],58:[2,76]},{7:[2,77],11:[2,77],12:[2,77],15:[2,77],27:[2,77],33:[2,77],43:[2,77],44:[2,77],45:[2,77],46:[2,77],47:[2,77],48:[2,77],49:[2,77],58:[2,77]},{7:[2,78],11:[2,78],12:[2,78],15:[2,78],27:[2,78],33:[2,78],43:[2,78],44:[2,78],45:[2,78],46:[2,78],47:[2,78],48:[2,78],49:[2,78],58:[2,78]},{7:[2,79],11:[2,79],12:[2,79],15:[2,79],27:[2,79],33:[2,79],43:[2,79],44:[2,79],45:[2,79],46:[2,79],47:[2,79],48:[2,79],49:[2,79],58:[2,79]},{7:[2,80],11:[2,80],12:[2,80],15:[2,80],27:[2,80],33:[2,80],43:[2,80],44:[2,80],45:[2,80],46:[2,80],47:[2,80],48:[2,80],49:[2,80],58:[2,80]},{7:[2,44],11:[2,44],12:[2,44],15:[2,44],27:[2,44],33:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44],49:[2,44],58:[2,44]},{15:[1,108]},{6:[2,13],12:[2,13],30:[2,13],34:[2,13],36:[2,13],38:[2,13],40:[2,13],62:[2,13]},{7:[2,39],12:[2,39],25:[2,39]},{7:[2,41],12:[2,41],25:[2,41]},{7:[2,42],12:[2,42],25:[2,42]},{12:[1,109],17:11,21:110,29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],55:111,56:[1,112],57:[1,113],58:[1,114],59:[1,115],60:[1,116],62:[1,14]},{13:[1,117]},{12:[2,22],23:[2,22],30:[2,22],34:[2,22],36:[2,22],38:[2,22],40:[2,22],56:[2,22],57:[2,22],58:[2,22],59:[2,22],60:[2,22],62:[2,22]},{12:[2,23],23:[2,23],30:[2,23],34:[2,23],36:[2,23],38:[2,23],40:[2,23],56:[2,23],57:[2,23],58:[2,23],59:[2,23],60:[2,23],62:[2,23]},{12:[2,16],23:[2,16],30:[2,16],33:[2,16],34:[2,16],36:[2,16],38:[2,16],40:[2,16],56:[2,16],57:[2,16],58:[2,16],59:[2,16],60:[2,16],62:[2,16]},{12:[2,17],23:[2,17],30:[2,17],33:[2,17],34:[2,17],36:[2,17],38:[2,17],40:[2,17],56:[2,17],57:[2,17],58:[2,17],59:[2,17],60:[2,17],62:[2,17]},{15:[2,53],33:[2,53]},{7:[2,29],11:[2,29],12:[2,29],15:[2,29],27:[2,29],33:[2,29],43:[2,29],44:[2,29],45:[2,29],46:[2,29],47:[2,29],48:[2,29],49:[2,29],58:[2,29]},{33:[1,118]},{7:[1,61],11:[1,66],12:[1,60],14:55,19:119,27:[1,62],44:[1,56],45:[1,57],46:[1,58],47:[1,59],48:[1,63],49:[1,64],50:65},{7:[2,4],11:[2,4],34:[2,4]},{12:[2,57],23:[2,57],30:[2,57],32:[1,120],34:[2,57],36:[2,57],38:[2,57],40:[2,57],56:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],62:[2,57]},{12:[1,9],17:11,21:26,22:121,23:[2,65],29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],56:[1,27],57:[1,28],58:[1,31],59:[1,29],60:[1,30],62:[1,14],63:25},{23:[1,122]},{12:[1,9],17:11,21:123,29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],62:[1,14]},{12:[1,9],17:11,21:124,29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],62:[1,14]},{12:[1,9],17:11,21:125,29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],62:[1,14]},{12:[1,9],17:11,21:126,29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],62:[1,14]},{12:[1,9],17:11,21:127,29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],62:[1,14]},{7:[1,61],11:[1,66],12:[1,60],14:55,19:129,27:[1,62],44:[1,56],45:[1,57],46:[1,58],47:[1,59],48:[1,63],49:[1,64],50:65,61:128},{7:[2,34],11:[2,34],12:[2,34],15:[2,34],27:[2,34],33:[2,34],43:[2,34],44:[2,34],45:[2,34],46:[2,34],47:[2,34],48:[2,34],49:[2,34],58:[2,34]},{33:[1,130]},{7:[1,61],11:[1,66],12:[1,60],14:55,19:131,27:[1,62],44:[1,56],45:[1,57],46:[1,58],47:[1,59],48:[1,63],49:[1,64],50:65},{23:[1,132]},{7:[2,40],12:[2,40],24:133,25:[2,40]},{12:[1,9],17:11,21:26,22:134,23:[2,65],29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],56:[1,27],57:[1,28],58:[1,31],59:[1,29],60:[1,30],62:[1,14],63:25},{12:[1,9],17:11,21:26,22:135,23:[2,65],29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],56:[1,27],57:[1,28],58:[1,31],59:[1,29],60:[1,30],62:[1,14],63:25},{12:[1,9],17:11,21:26,22:136,23:[2,65],29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],56:[1,27],57:[1,28],58:[1,31],59:[1,29],60:[1,30],62:[1,14],63:25},{12:[1,9],17:11,21:26,22:137,23:[2,65],29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],56:[1,27],57:[1,28],58:[1,31],59:[1,29],60:[1,30],62:[1,14],63:25},{12:[1,9],17:11,21:26,22:138,23:[2,65],29:15,30:[1,20],34:[1,17],35:12,36:[1,18],37:13,38:[1,19],39:10,40:[1,16],56:[1,27],57:[1,28],58:[1,31],59:[1,29],60:[1,30],62:[1,14],63:25},{15:[1,139]},{15:[2,55]},{7:[2,30],11:[2,30],12:[2,30],15:[2,30],27:[2,30],33:[2,30],43:[2,30],44:[2,30],45:[2,30],46:[2,30],47:[2,30],48:[2,30],49:[2,30],58:[2,30]},{33:[1,140]},{7:[2,40],12:[2,40],24:141,25:[2,40]},{7:[1,98],12:[1,99],25:[1,142],52:96,53:95,54:97},{23:[2,47]},{23:[2,48]},{23:[2,49]},{23:[2,50]},{23:[2,51]},{7:[2,56],12:[2,56],25:[2,56]},{15:[1,143]},{7:[1,98],12:[1,99],25:[1,144],52:96,53:95,54:97},{7:[2,46],12:[2,46],25:[2,46]},{7:[2,43],12:[2,43],25:[2,43]},{7:[2,45],12:[2,45],25:[2,45]}],
defaultActions: {6:[2,1],43:[2,64],129:[2,55],134:[2,47],135:[2,48],136:[2,49],137:[2,50],138:[2,51]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*skip comments*/
break;
case 1:/* skip whitespace */
break;
case 2:return 7
break;
case 3:return 7
break;
case 4:return 66
break;
case 5:return 48
break;
case 6:return 64
break;
case 7:return 65
break;
case 8:return 67
break;
case 9:return 68
break;
case 10:return 69
break;
case 11:return 70
break;
case 12:return 71
break;
case 13:return 72
break;
case 14:return 40
break;
case 15:return 49
break;
case 16:return 15
break;
case 17:return 13
break;
case 18:return 42
break;
case 19:return 42
break;
case 20:return 42
break;
case 21:return 42
break;
case 22:return 42
break;
case 23:return 11
break;
case 24:return 62
break;
case 25:return 57
break;
case 26:return 56
break;
case 27:return 58
break;
case 28:return 60
break;
case 29:return 30
break;
case 30:return 30
break;
case 31:return 32
break;
case 32:return 33
break;
case 33:return 43
break;
case 34:return 36
break;
case 35:return 46
break;
case 36:return 38
break;
case 37:return 45
break;
case 38:return 34
break;
case 39:return 23
break;
case 40:return 25
break;
case 41:return 47
break;
case 42:return 12
break;
case 43:return 27
break;
case 44:return 27
break;
case 45:return 44
break;
case 46:return 6
break;
case 47:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*\n)/,/^(?:\s+)/,/^(?:%%&)/,/^(?:%%)/,/^(?:%)/,/^(?:("([^"])*"))/,/^(?:px\b)/,/^(?:mx\b)/,/^(?:cm\b)/,/^(?:mm\b)/,/^(?:em\b)/,/^(?:ex\b)/,/^(?:pt\b)/,/^(?:pc\b)/,/^(?:\[)/,/^(?:#[a-fA-F0-9]{3,6})/,/^(?:;)/,/^(?:=)/,/^(?:~=)/,/^(?:\|=)/,/^(?:\^=)/,/^(?:\$=)/,/^(?:\*=)/,/^(?:\$)/,/^(?:\*)/,/^(?:\+)/,/^(?:>)/,/^(?:,)/,/^(?:~)/,/^(?:::)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\])/,/^(?:#)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:!)/,/^(?:@)/,/^(?:\{)/,/^(?:\})/,/^(?:(\/?(([a-zA-Z0-9]|[!#$%.:&*--~])+\/\/?)+)(([a-zA-Z0-9]|[!#$%.:&*--~])+))/,/^(?:(-|_|[a-zA-Z])(-|_|[a-zA-Z0-9])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z0-9])+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = scss;
exports.Parser = scss.Parser;
exports.parse = function () { return scss.parse.apply(scss, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}